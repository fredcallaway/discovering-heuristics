// Generated by CoffeeScript 1.12.3

/*
experiment.coffee
Fred Callaway

 * Cue balls experiment
 */
var COLORS, COLOR_NAMES, COMPLETED_INSTRUCTIONS, DEBUG, DEMO, PLAYERS, REPROMPT, SKIP, blocks, calculate_bonus, colorize, condition, counterbalance, params, prompt_resubmit, psiturk, save_data, skip_trials,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DEBUG = true;

if (DEBUG) {
  console.log("==================================\n=========== DEBUG MODE ===========\n==================================");
  condition = 0;
  counterbalance = 0;
}

if (mode === "{{ mode }}") {
  DEMO = true;
  condition = 0;
  counterbalance = 0;
}

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

params = void 0;

blocks = void 0;

SKIP = jsPsych.endCurrentTimeline;

skip_trials = function(n) {
  var _, j, ref, results;
  results = [];
  for (_ = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; _ = 0 <= ref ? ++j : --j) {
    results.push(jsPsych.finishTrial());
  }
  return results;
};

colorize = function(c, txt) {
  return "<span style='color: " + c + "'><b>" + txt + "</b></span>";
};

COMPLETED_INSTRUCTIONS = false;

COLORS = ['#4C4FE1', '#53BA42', '#E3B643'];

COLOR_NAMES = [colorize(COLORS[0], 'Blue'), colorize(COLORS[1], 'Green'), colorize(COLORS[2], 'Yellow')];

PLAYERS = [colorize(COLORS[0], 'Player B'), colorize(COLORS[1], 'Player G'), colorize(COLORS[2], 'Player Y')];

(function() {
  var AskCueBlock, BLOCK_IDX, BallBlock, Block, CUE_NAMES, NUM_BLOCKS, NUM_TRIALS, TextBlock, all_cue, ask_cue, block_header, check_database, check_no_reload, critical, debug, exp_data, experiment_timeline, final, final_ask_cue, final_feedback, initialize, instruct_loop, instructions, mix_cue_trials, mixed_cue, pre_critical, pre_training, previous_block_feedback, quiz, ref, reload_error, save_data_block, save_error, save_error_page, save_success, standard, survey, text, training, welcome;
  exp_data = (function() {
    var result;
    result = $.ajax({
      dataType: 'json',
      url: "static/json/condition_" + condition + ".json",
      async: false
    });
    return result.responseJSON;
  })();
  console.log('exp_data', exp_data);
  params = exp_data.params;
  if (DEBUG) {
    params.cue_within = true;
    params.wall_cue = false;
    params.color_cue = 'background';
    params.backstory = 'game';
    params.cue_counter = 1;
  }
  psiturk.recordUnstructuredData('params', params);
  blocks = exp_data.blocks;
  NUM_TRIALS = 0;
  NUM_BLOCKS = void 0;
  BLOCK_IDX = -1;
  CUE_NAMES = void 0;
  (function() {
    var cue_color_names, i;
    i = params.cue_counter;
    if (DEBUG) {
      i = 3;
    }
    params.cue_colors = {
      hit: COLORS[i],
      neutral: COLORS[(i + 1) % 3],
      miss: COLORS[(i + 2) % 3]
    };
    cue_color_names = {
      hit: COLOR_NAMES[i],
      neutral: COLOR_NAMES[(i + 1) % 3],
      miss: COLOR_NAMES[(i + 2) % 3]
    };
    if (params.backstory) {
      CUE_NAMES = params.players = {
        hit: PLAYERS[i],
        neutral: PLAYERS[(i + 1) % 3],
        miss: PLAYERS[(i + 2) % 3]
      };
    } else {
      CUE_NAMES = {
        hit: COLOR_NAMES[i],
        neutral: COLOR_NAMES[(i + 1) % 3],
        miss: COLOR_NAMES[(i + 2) % 3]
      };
    }
    return console.log('cue_color_names', cue_color_names);
  })();
  if (!DEMO) {
    $(window).resize(function() {
      return check_window_size(900, 700, $('#jspsych-target'));
    });
    $(window).resize();
  }
  text = {
    debug: function() {
      if (DEBUG) {
        return "\n\n\n\n`\n----------------------------------------`\n\n## `EXPERIMENT ERROR`\n**IF YOU ARE SEEING THIS TEXT, THERE IS A MISTAKE IN\nTHE EXPERIMENT.** Please email\n[fredcallaway@berkeley.edu](mailto:fredcallaway@berkeley.edu?subject=EXPERIMENT ERROR)\nimmediately to warn him about his mistake! Please do not\nreturn the hit, but do not attempt to complete it either.\nIt won't work. We will compensate you for your time!\n\n`----------------------------------------`";
      } else {
        return '';
      }
    },
    instructions: function() {
      return md_to_html("# Instructions\n\n" + (text.backstory()) + "\n\nOn each trial, you will be asked to predict whether or not the ball will\ngo in the hole. The ball can bounce off the outer walls any number of\ntimes, but once it hits the center wall, the round is over. If you think\nthe ball will go in the hole, press **q** for *yes*. If you think the\nball will miss the hole and hit the center wall, press **p** for *no*.\n\nNext up is a quiz to make sure you understand how the experiment works.\nPress the key corresponding to **yes** to continue.");
    },
    color_cue: function() {
      var one_color;
      one_color = (function() {
        switch (params.color_cue) {
          case 'ball':
            return function(i) {
              return PLAYERS[i] + " plays with a " + COLOR_NAMES[i] + " ball";
            };
          case 'background':
            return function(i) {
              return PLAYERS[i] + " plays on a " + COLOR_NAMES[i] + " court";
            };
          default:
            throw new Error('bad color_cue');
        }
      })();
      return (one_color(0)) + ",\n" + (one_color(1)) + ", and\n" + (one_color(2));
    },
    giveaway_long: function() {
      if (params.backstory === 'giveaway') {
        return "**Each player is playing a different version of the game.**\n\n  - One of the players is trying to bounce the ball into the hole.\n  - One is trying to avoid the hole.\n  - One doesn't care whether or not the ball goes through the hole.\n\nAt the beginning of every block, we will ask you which player you think\nis playing which game.";
      } else {
        return '';
      }
    },
    giveaway_short: function() {
      return "One of them is trying to bounce the ball into the hole,\none is trying to avoid the hole, and\none doesn't care whether or not the ball goes through the hole.";
    },
    backstory: function() {
      var ref;
      if ((ref = params.backstory) === 'giveaway' || ref === 'game') {
        return "In this experiment, you will watch videos of three different people\nplaying a game with a ball. " + (text.color_cue()) + "\n\nThe game is played in a box with five walls: four on the outside and\none in the middle. The \"center wall\" in the middle has a hole in it, which\nchanges size and location on every round. " + (text.giveaway_long());
      } else if (params.backstory === 'lesson') {
        return "In this experiment, you will watch an imaginary person, Natalie, getting\na lesson in playing a ball game.\n\nThe game is played in a box with five walls: four on the outside and\none in the middle. The wall in the middle has a hole in it. The goal\nof the game is to throw the ball so that it goes through this hole\n*before it hits the center wall*. The player earns extra points if the\nshot bounces off the other walls in the box, but your task is just to\ndetermine whether each shot will go through the hole in the center\nwall.";
      } else {
        return "In this experiment, you will see a ball bouncing around in a box.\n\nThe box has five walls: four on the outside and one in the middle. The\nwall in the middle has a hole in it. Your task is to determine whether the\nball will go through the hole *before it hits the center wall*.";
      }
    },
    pre_training: function() {
      return md_to_html("# Nice job!\n\nYou passed the quiz! Before the game starts, there will be a few\npractice rounds to help you learn how to perform the task.\n\nPress **space** to continue.");
    },
    standard_header: function() {
      return md_to_html("# Well done!\n\nYou've completed all the practice trials. Now, the actual experiment will\nbegin, which will consist of **" + NUM_TRIALS + " trials** divided into\n**" + NUM_BLOCKS + " blocks**. Try to get as many correct as you can.\n\n" + (text.game_on()) + "\n\n" + (text.no_feedback()) + "\n\nPress **space** to continue.");
    },
    game_on: function() {
      switch (params.backstory) {
        case 'game':
          return "Remember, " + (text.color_cue());
        case 'giveaway':
          return "Remember, " + (text.color_cue()) + ". " + (text.giveaway_short());
        case 'lesson':
          return "Because Natalie is taking a lesson, there will sometimes be a mark\non the wall placed by her teacher.";
        default:
          return '';
      }
    },
    manipulation_check: function() {
      var cue_on, cues, description, descriptions, j, len, questions, ref, ref1, template;
      template = function(description) {
        return "Did you notice the " + description + "?\n<br>\nDid you think it was relevant for determining whether the ball\nwould go through the hole?";
      };
      questions = [];
      cues = [params.wall_cue, params.color_cue === 'ball', params.color_cue === 'background'];
      descriptions = ["red mark on the walls of the box", "ball changing color", "background changing color"];
      ref = _.zip(cues, descriptions);
      for (j = 0, len = ref.length; j < len; j++) {
        ref1 = ref[j], cue_on = ref1[0], description = ref1[1];
        if (cue_on) {
          questions.push(template(description));
        }
      }
      return questions;
    },
    no_feedback: function() {
      if (params.show_feedback) {
        return '';
      } else {
        return "Unlike in the training trials, **you will not see the path of the ball\nafter you make a choice**. Some trials will be more difficult than others\nâ€” just do your best!";
      }
    },
    bonus: function(final) {
      var lead;
      if (final == null) {
        final = false;
      }
      if (params.bonus_rate) {
        lead = final ? "Your final bonus is " : "Your total bonus so far is ";
        return lead + ("<b>$" + (calculate_bonus()) + "</b>");
      } else {
        return "";
      }
    }
  };
  Block = (function() {
    function Block(config) {
      _.extend(this, config);
      this.block = this;
      if (this.init != null) {
        this.init();
      }
    }

    return Block;

  })();
  TextBlock = (function(superClass) {
    extend(TextBlock, superClass);

    function TextBlock() {
      return TextBlock.__super__.constructor.apply(this, arguments);
    }

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = ['space'];

    return TextBlock;

  })(Block);
  BallBlock = (function(superClass) {
    extend(BallBlock, superClass);

    BallBlock.prototype.type = 'ball';

    BallBlock.prototype.cue_present = true;

    BallBlock.prototype.players = null;

    BallBlock.prototype.responses = {
      q: 'yes',
      p: 'no'
    };

    BallBlock.prototype.prompt = 'Will the ball go in the hole? (q=yes, p=no)';

    function BallBlock(config) {
      this.bonus = bind(this.bonus, this);
      this.num_trials = bind(this.num_trials, this);
      this.score = 0;
      this.trials_completed = 0;
      _.extend(this, params);
      BallBlock.__super__.constructor.call(this, config);
    }

    BallBlock.prototype.num_trials = function() {
      return this.timeline.length;
    };

    BallBlock.prototype.bonus = function() {
      return this.score * params.bonus_rate;
    };

    return BallBlock;

  })(Block);
  welcome = new TextBlock({
    text: md_to_html("# Welcome\n\nThanks for accepting our HIT and participating in our experiment!\nBefore you begin, we need to test the connection to our database.\n\nPress **space** to continue.\n\n" + (text.debug()))
  });
  save_error_page = new TextBlock({
    text: function() {
      return md_to_html("# Error accessing database\n\nWe are unable to access the experiment database. This could be due\nto an unreliable or slow Internet connection. Try refreshing this page.\nIf you see this screen again, you unfortunately cannot complete the\nexperiment. Please return the HIT so someone else may take your place.");
    },
    cont_key: [192]
  });
  save_error = new Block({
    timeline: [save_error_page],
    loop_function: function(data) {
      return true;
    }
  });
  check_database = new Block({
    timeline: [save_error],
    conditional_function: function() {
      var error;
      console.log('testing saveData');
      error = false;
      psiturk.saveData({
        error: function() {
          console.log('ERROR saving data.');
          return error = true;
        },
        success: function() {
          return console.log('Data saved to psiturk server.');
        }
      });
      return error;
    }
  });
  save_data_block = new Block({
    type: 'call-function',
    func: function() {
      console.log('Saving data.');
      return psiturk.saveData();
    }
  });
  reload_error = new TextBlock({
    text: function() {
      return md_to_html("# Error: refresh detected\n\nIt appears that you have already completed the instructions\nand reloaded the page. This is against experiment protocol, so\nwe cannot allow you to participate in the experiment. If you\nthat there was a bug or mistake in the experiment, file a report\nat the following URL and we will compensate you for your time\n\nhttps://goo.gl/forms/BGpS1cs9rILVpxCS2");
    }
  });
  check_no_reload = new Block({
    timeline: [reload_error],
    conditional_function: function() {
      return COMPLETED_INSTRUCTIONS;
    }
  });
  save_success = new TextBlock({
    text: function() {
      return md_to_html("# Success\n\nGreat, we have a good connection to the database. Before you begin the\nexperiment please copy down the following URL. If something goes wrong\nduring the experiment, you can fill out that form to tell us what\nhappened. We will compensate you for your time spent.\n\nhttps://goo.gl/forms/BGpS1cs9rILVpxCS2\n\n**Warning:** Do not close or refresh this window at any point during the\nexperiment. Doing so will disqualify you from completing the experiment.\n\nPress **space** to continue.");
    }
  });
  initialize = new Block({
    timeline: [welcome, check_database, save_success]
  });
  instructions = new TextBlock({
    text: text.instructions,
    cont_key: ['q']
  });
  quiz = new Block({
    preamble: function() {
      return md_to_html("# Quiz");
    },
    type: 'survey-multi-choice',
    questions: ["Which key should you press if you think the ball\nwill bounce off the back wall and then fly through\nthe hole in the center wall?", "Which key should you press if you think the ball will\nbounce off the center wall, then the back wall,\nand then fly through the hole in the center wall?", "What color is Player B's " + (params.color_cue === 'ball' ? 'ball' : 'court') + "?"].slice(0, ((ref = params.backstory) === 'giveaway' || ref === 'game' ? 3 : 2)),
    options: [['q (yes)', 'p (no)'], ['q (yes)', 'p (no)'], ['blue', 'yellow', 'green']],
    required: [true, true, true],
    correct: ['q (yes)', 'p (no)', 'blue'],
    on_mistake: function(data) {
      return alert("You got at least one question wrong. We'll send you back to the\ninstructions and then you can try again.");
    }
  });
  instruct_loop = new Block({
    timeline: [instructions, quiz],
    loop_function: function(data) {
      var c, j, len, ref1;
      ref1 = data[1].correct;
      for (j = 0, len = ref1.length; j < len; j++) {
        c = ref1[j];
        if (!c) {
          return true;
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });
  pre_training = new TextBlock({
    text: text.pre_training
  });
  training = new BallBlock({
    show_feedback: true,
    block_idx: BLOCK_IDX += 1,
    wall_cue: false,
    color_cue: false,
    cue_colors: {},
    timeline: _.shuffle(blocks.instruct)
  });
  previous_block_feedback = function(last_block) {
    if (last_block.score != null) {
      return "\nIn the previous block, you answered correctly on **" + last_block.score + "**\nout of **" + (last_block.num_trials()) + "** trials.";
    } else {
      return "";
    }
  };
  if (params.backstory) {
    AskCueBlock = (function(superClass) {
      extend(AskCueBlock, superClass);

      function AskCueBlock() {
        return AskCueBlock.__super__.constructor.apply(this, arguments);
      }

      AskCueBlock.prototype.type = 'survey-multi-choice';

      AskCueBlock.prototype.horizontal = true;

      AskCueBlock.prototype.questions = ['Which player is trying to get the ball <b>into</b> the hole?', 'Which player is trying to <b>avoid</b> the hole?', 'How confident are you in your response to the previous two questions?'];

      AskCueBlock.prototype.options = [PLAYERS, PLAYERS, ['not at all', 'a little', 'somewhat', 'very', 'certain']];

      AskCueBlock.prototype.required = [true, true, true];

      AskCueBlock.prototype.correct = [CUE_NAMES.hit, CUE_NAMES.miss, 'certain'];

      return AskCueBlock;

    })(Block);
  } else {
    AskCueBlock = (function(superClass) {
      extend(AskCueBlock, superClass);

      function AskCueBlock() {
        return AskCueBlock.__super__.constructor.apply(this, arguments);
      }

      AskCueBlock.prototype.type = 'survey-multi-choice';

      AskCueBlock.prototype.horizontal = true;

      AskCueBlock.prototype.questions = ['The ball is <b>more</b> likely to go in when the background is...', 'The ball is <b>less</b> likely to go in when the background is...', 'How confident are you in your responses to the previous two questions?'];

      AskCueBlock.prototype.options = [COLOR_NAMES, COLOR_NAMES, ['not at all', 'a little', 'somewhat', 'very', 'certain']];

      AskCueBlock.prototype.required = [true, true, true];

      AskCueBlock.prototype.correct = [CUE_NAMES.hit, CUE_NAMES.miss, 'certain'];

      return AskCueBlock;

    })(Block);
  }
  block_header = function(block_idx, last_block) {
    var cont, header;
    header = "# Block " + (block_idx + 1) + " of " + NUM_BLOCKS;
    cont = '\n\nPress **space** to continue.';
    if (params.backstory === 'giveaway' && block_idx !== 0) {
      return new AskCueBlock({
        preamble: function() {
          return md_to_html(header + (previous_block_feedback(last_block)));
        }
      });
    } else {
      return new TextBlock({
        text: function() {
          return md_to_html(header + (previous_block_feedback(last_block)) + cont);
        }
      });
    }
  };
  mix_cue_trials = function(trials) {
    var cue, n, nc, no_cue, result;
    result = [];
    n = trials.length;
    cue = deep_copy(trials);
    no_cue = deep_copy(trials);
    no_cue = no_cue.slice(n / 2).concat(no_cue.slice(0, n / 2));
    while (cue.length) {
      result.push(cue.pop());
      nc = no_cue.pop();
      nc.cue_present = false;
      result.push(nc);
    }
    return result;
  };
  mixed_cue = function() {
    return new Block({
      timeline: (function() {
        var breakdowns, bs, controls, ctrl, e, easy, h, hard, j, len, m_blocks, medium, mult, s, timeline, trials;
        easy = mix_cue_trials(_.shuffle(blocks.easy));
        medium = mix_cue_trials(_.shuffle(blocks.standard));
        hard = mix_cue_trials(_.shuffle(blocks.hard));
        controls = _.shuffle(blocks.control);
        bs = 12;
        breakdowns = [[4, 0, 0], [3, 1, 0], [2, 2, 0], [1, 3, 0], [0, 4, 0], [0, 3, 1], [0, 2, 2], [0, 1, 3], [0, 0, 4]];
        mult = bs / 4;
        m_blocks = (function() {
          var j, len, ref1, results;
          results = [];
          for (j = 0, len = breakdowns.length; j < len; j++) {
            ref1 = breakdowns[j], e = ref1[0], s = ref1[1], h = ref1[2];
            ctrl = controls.length ? [controls.pop()] : [];
            results.push(_.shuffle((easy.splice(0, e * mult)).concat((medium.splice(0, s * mult)).concat((hard.splice(0, h * mult)).concat(ctrl)))));
          }
          return results;
        })();
        NUM_BLOCKS = m_blocks.length + 1;
        timeline = [];
        timeline.push(new TextBlock({
          text: text.standard_header
        }));
        for (j = 0, len = m_blocks.length; j < len; j++) {
          trials = m_blocks[j];
          console.log('last', _.last(timeline));
          timeline.push(block_header(BLOCK_IDX, _.last(timeline)));
          timeline.push(new BallBlock({
            timeline: trials,
            block_idx: BLOCK_IDX += 1
          }));
          NUM_TRIALS += trials.length;
        }
        return timeline;
      })()
    });
  };
  all_cue = function() {
    return new Block({
      timeline: (function() {
        var controls, easy, hard, j, len, medium, s_blocks, timeline, trials;
        easy = chunk(_.shuffle(blocks.easy), 3);
        medium = chunk(_.shuffle(blocks.standard), 3);
        hard = chunk(_.shuffle(blocks.hard), 3);
        controls = _.shuffle(blocks.control);
        s_blocks = [_.shuffle(_.flatten((easy.splice(0, 4)).concat([controls.pop()]))), _.shuffle(_.flatten((easy.splice(0, 3)).concat((medium.splice(0, 1)).concat([controls.pop()])))), _.shuffle(_.flatten((easy.splice(0, 2)).concat((medium.splice(0, 2)).concat([controls.pop()])))), _.shuffle(_.flatten((easy.splice(0, 1)).concat((medium.splice(0, 3)).concat([controls.pop()])))), _.shuffle(_.flatten(medium.splice(0, 4))), _.shuffle(_.flatten((hard.splice(0, 1)).concat((medium.splice(0, 3)).concat([controls.pop()])))), _.shuffle(_.flatten((hard.splice(0, 2)).concat((medium.splice(0, 2)).concat([controls.pop()])))), _.shuffle(_.flatten((hard.splice(0, 3)).concat((medium.splice(0, 1)).concat([controls.pop()])))), _.shuffle(_.flatten((hard.splice(0, 4)).concat([controls.pop()])))];
        NUM_BLOCKS = s_blocks.length + 1;
        timeline = [];
        timeline.push(new TextBlock({
          text: text.standard_header
        }));
        for (j = 0, len = s_blocks.length; j < len; j++) {
          trials = s_blocks[j];
          timeline.push(block_header(BLOCK_IDX, _.last(timeline)));
          timeline.push(new BallBlock({
            timeline: trials,
            block_idx: BLOCK_IDX += 1
          }));
          NUM_TRIALS += trials.length;
        }
        return timeline;
      })()
    });
  };
  standard = params.cue_within ? mixed_cue() : all_cue();
  debug = new BallBlock({
    timeline: blocks.standard
  });
  pre_critical = (function() {
    var cont, header, no_feedback;
    no_feedback = params.show_feedback ? "For the last few trials, you won't see any feedback.\nJust do your best!" : "";
    cont = '\n\nPress **space** to continue.';
    header = "# Block " + NUM_BLOCKS + " of " + NUM_BLOCKS;
    if (params.backstory === 'giveaway') {
      return new AskCueBlock({
        preamble: function() {
          return md_to_html(header + "\n\n" + (previous_block_feedback(_.last(standard.timeline))) + "\n\n" + no_feedback);
        }
      });
    } else {
      return new TextBlock({
        text: function() {
          return md_to_html(header + "\n\n" + (previous_block_feedback(_.last(standard.timeline))) + "\n\n" + no_feedback + "\n\n" + cont);
        }
      });
    }
  })();
  critical = new BallBlock({
    block_idx: BLOCK_IDX += 1,
    show_feedback: false,
    timeline: (function() {
      var crit, filler, i, j, ref1, timeline;
      timeline = [];
      crit = blocks.critical;
      filler = _.shuffle(blocks.filler);
      for (i = j = 0, ref1 = crit.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        timeline.push(crit[i]);
        if (((crit.length / 2) <= i && i < (crit.length - 1))) {
          timeline.push(filler.pop());
          timeline.push(filler.pop());
        }
      }
      NUM_TRIALS += timeline.length;
      return timeline;
    })()
  });
  final_ask_cue = new AskCueBlock({
    preamble: function() {
      return md_to_html("# All blocks completed\n\n" + (previous_block_feedback(critical)));
    }
  });
  ask_cue = new AskCueBlock({
    preamble: function() {
      return md_to_html("# Survey\n");
    }
  });
  final_feedback = new TextBlock({
    text: function() {
      return md_to_html("# All blocks completed\n\n" + (previous_block_feedback(critical)) + "\n\nPress **space** to continue.");
    }
  });
  survey = new Block({
    type: 'survey-text',
    preamble: md_to_html("# Survey\n\nThanks for participating in our experiment! Please take a few moments to\nanswer the following questions. You can keep it short and sweet."),
    questions: ["How did you decide whether or not the ball would go in the hole?", "Did you change your strategy at any point during the experiment?", "Anything else you'd like to tell us?"],
    rows: 4,
    columns: Array(4).fill(60)
  });
  final = new Block({
    timeline: (function() {
      if (params.backstory === 'giveaway') {
        return [final_ask_cue, survey];
      } else {
        return [final_feedback, survey, ask_cue];
      }
    })()
  });
  if (DEBUG) {
    experiment_timeline = [debug, initialize, instruct_loop, pre_training, training, save_data_block, standard, pre_critical, critical, final];
  } else {
    experiment_timeline = [initialize, instruct_loop, pre_training, training, save_data_block, standard, pre_critical, critical, final];
  }
  try {
    return jsPsych.init({
      display_element: $('#jspsych-target'),
      timeline: experiment_timeline,
      on_finish: function() {
        if (DEBUG) {
          return jsPsych.data.displayData();
        } else {
          psiturk.recordUnstructuredData('final_bonus', 0);
          return save_data();
        }
      },
      on_data_update: function(data) {
        console.log('data', data);
        return psiturk.recordTrialData(data);
      }
    });
  } catch (error1) {

  }
})();

calculate_bonus = function() {
  return 0;
};

REPROMPT = null;

save_data = function() {
  return psiturk.saveData({
    success: function() {
      console.log('Data saved to psiturk server.');
      if (REPROMPT != null) {
        window.clearInterval(REPROMPT);
      }
      return psiturk.completeHIT();
    },
    error: function() {
      return prompt_resubmit;
    }
  });
};

prompt_resubmit = function() {
  $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your INTERNET connection.\nPress the button to resubmit.\n<p>\nIf you continue to have problems, please fill out the following form\nand we will pay you with a compensation HIT.\n<p>\nhttps://goo.gl/forms/BGpS1cs9rILVpxCS2\n<p>\n<button id=\"resubmit\">Resubmit</button>");
  return $('#resubmit').click(function() {
    $('#jspsych-target').html('Trying to resubmit...');
    REPROMPT = window.setTimeout(prompt_resubmit, 10000);
    return save_data();
  });
};
