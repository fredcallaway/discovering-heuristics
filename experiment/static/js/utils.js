// Generated by CoffeeScript 1.12.3

/**
 * Helper function to see whether a value is defined.
 *
 * @param {string} name - An informative name for the value being checked
 * @param val - The value to be checked
 * @throws {Error} if the value is undefined
 * @returns the value that was passed in
 */
var assert, check, check_obj, check_window_size, chunk, converter, deep_copy, getTime, interleave, md_to_html,
  slice = [].slice;

check = function(name, val) {
  if (val === void 0) {
    throw new Error(name + "is undefined");
  }
  return val;
};

check_obj = function(obj, keys) {
  var k, len1, m;
  if (keys == null) {
    keys = Object.keys(obj);
  }
  for (m = 0, len1 = keys.length; m < len1; m++) {
    k = keys[m];
    if (obj[k] === void 0) {
      console.log('Bad Object: ', obj);
      throw new Error(k + " is undefined");
    }
  }
  return obj;
};

assert = function(val) {
  if (!val) {
    throw new Error('Assertion Error');
  }
  return val;
};

chunk = function(arr, len) {
  var i, results;
  i = 0;
  results = [];
  while (i < arr.length) {
    results.push(arr.slice(i, i += len));
  }
  return results;
};

interleave = function() {
  var a, arr, arrs, i, j, k, l, lens, m, min, n, o, ratios, ref, ref1, ref2, result;
  arrs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  result = [];
  lens = (function() {
    var len1, m, results;
    results = [];
    for (m = 0, len1 = arrs.length; m < len1; m++) {
      a = arrs[m];
      results.push(a.length);
    }
    return results;
  })();
  min = Math.min.apply(Math, lens);
  ratios = (function() {
    var len1, m, results;
    results = [];
    for (m = 0, len1 = lens.length; m < len1; m++) {
      l = lens[m];
      results.push(l / min);
    }
    return results;
  })();
  arrs = (function() {
    var len1, m, results;
    results = [];
    for (m = 0, len1 = arrs.length; m < len1; m++) {
      arr = arrs[m];
      results.push(arr.reverse());
    }
    return results;
  })();
  for (i = m = 0, ref = min; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
    for (j = n = 0, ref1 = arrs.length; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {
      for (k = o = 0, ref2 = ratios[j]; 0 <= ref2 ? o < ref2 : o > ref2; k = 0 <= ref2 ? ++o : --o) {
        result.push(arrs[j].pop());
      }
    }
  }
  return result;
};

deep_copy = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};


/**
 * Function to check the window size, and determine whether it is
 * large enough to fit the given experiment. If the window size is not
 * large enough, it hides the experiment display and instead displays
 * the error in the #window_error DOM element.#
 */

check_window_size = function(width, height, display) {
  var maxHeight, win_width;
  win_width = $(window).width();
  maxHeight = $(window).height();
  if ($(window).width() < width || $(window).height() < height) {
    display.hide();
    return $('#window_error').show();
  } else {
    $('#window_error').hide();
    return display.show();
  }
};

converter = new showdown.Converter();

md_to_html = function(txt) {
  return converter.makeHtml(txt);
};

getTime = function() {
  return (new Date).getTime();
};
