// Generated by CoffeeScript 1.12.3

/*
jspsych-template.coffee
Fred Callaway

Template for jspsych plugins
 */
var BallTrial, SCORE, TRIALS_COMPLETED, debug_info, debug_log, handle_error,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

debug_log = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
};

TRIALS_COMPLETED = 0;

SCORE = 0;

debug_info = function(e, trial_config) {
  var msg;
  msg = e.name;
  if (e.message) {
    msg += ' | MESSAGE: ' + e.message;
  }
  return "```\n----------------------------------------\nPARAMS:\n" + (JSON.stringify(params)) + "\n\nTRIAL_CONFIG:\n" + (JSON.stringify(trial_config)) + "\n\nERROR MESSAGE:\n" + (JSON.stringify(msg)) + "\n----------------------------------------\n```";
};

handle_error = function(e, trial_config, display) {
  var DEBUG_INFO;
  delete trial_config.block;
  delete trial_config.constructor;
  psiturk.recordTrialData(trial_config);
  DEBUG_INFO = debug_info(e, trial_config);
  console.log(DEBUG_INFO);
  psiturk.recordUnstructuredData('DEBUG_INFO', DEBUG_INFO);
  display.html(md_to_html("# Experiment Error\n\nThe experiment has encountered an error. Unfortunately, you cannot\ncontinue the experiment. We will attempt to complete the HIT early.\nIn case we cannot successfully complete the HIT, please copy down the\nfollowing URL. If you cannot submit the HIT, fill out the form at that\nURL and we will pay you through a compensation HIT. We're sorry (and\nfrankly quite embarased) about this inconvenience. Thank you for your time!\n\nhttps://goo.gl/forms/BGpS1cs9rILVpxCS2\n\nPlease additionally include the following debugging information if you need\nto fill out that form:\n\n" + (debug_info(e, trial_config)) + "\n"));
  return $('<button>').addClass('btn btn-primary btn-lg').text('Submit HIT').click((function() {
    display.empty();
    return save_data();
  })).appendTo(display);
};

BallTrial = (function() {
  function BallTrial(config, display1) {
    var params, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    this.display = display1;
    this.update_counters = bind(this.update_counters, this);
    this.end_trial = bind(this.end_trial, this);
    this.after_response = bind(this.after_response, this);
    this.query_response = bind(this.query_response, this);
    this.start = bind(this.start, this);
    this.create_stim = bind(this.create_stim, this);
    this.init = bind(this.init, this);
    params = (this.hole = config.hole, this.layout = config.layout, this.condition = config.condition, this.color_cue = config.color_cue, this.wall_cue = config.wall_cue, this.cue_present = config.cue_present, this.kind = config.kind, this.prompt = config.prompt, this.responses = config.responses, this.block = config.block, this.num_trials = config.num_trials, this.cue_colors = config.cue_colors, this.players = config.players, this.block_idx = (ref = config.block_idx) != null ? ref : -1, this.right_message = (ref1 = config.right_message) != null ? ref1 : null, this.good_cue = (ref2 = config.good_cue) != null ? ref2 : true, this.show_feedback = (ref3 = config.show_feedback) != null ? ref3 : true, this.draw_trajectory = (ref4 = config.draw_trajectory) != null ? ref4 : true, this.wall_color = (ref5 = config.wall_color) != null ? ref5 : 'black', config);
    this.data = {
      hole: this.hole,
      layout: this.layout,
      condition: this.condition,
      color_cue: this.color_cue,
      wall_cue: this.wall_cue,
      cue_present: this.cue_present,
      kind: this.kind,
      good_cue: this.good_cue,
      show_feedback: this.show_feedback,
      draw_trajectory: this.draw_trajectory,
      block_idx: this.block_idx
    };
    console.log('BallTrial params', params);
    if (!this.good_cue) {
      console.log('BAD CUE');
    }
    check_obj(this);
    if ((ref6 = this.message) != null ? ref6.length : void 0) {
      this.progress_counter = $('#progress_counter');
      this.prompt = $('#prompt').css('color', 'black');
      this.score_counter = $('#score_counter');
      this.canvas = $('#canvas');
    } else {
      this.progress_counter = $('<div>', {
        id: 'ball_progress_counter',
        html: '&nbsp'
      }).appendTo(this.display);
      this.message = $('<div>', {
        id: 'ball_message',
        html: this.prompt || '&nbsp'
      }).appendTo(this.display);
      this.score_counter = $('<div>', {
        id: 'ball_score_counter',
        html: '&nbsp'
      }).appendTo(this.display);
      this.canvas = $('<canvas>', {
        id: 'canvas'
      }).appendTo(this.display);
      this.update_counters();
    }
  }

  BallTrial.prototype.init = function() {
    var load_stim, n_tries, url;
    url = "static/json/" + this.hole + ".json";
    n_tries = 3;
    load_stim = (function(_this) {
      return function() {
        return $.ajax({
          dataType: 'json',
          url: url,
          async: false,
          success: _this.create_stim,
          error: function() {
            console.log("error loading stim " + url);
            if (n_tries) {
              n_tries -= 1;
              return load_stim();
            } else {
              throw new Error("Error loading " + url);
            }
          }
        });
      };
    })(this);
    return load_stim();
  };

  BallTrial.prototype.create_stim = function(stim_config) {
    var cue_says_hit, player;
    debug_log('create_stim');
    stim_config = _.extend(stim_config, {
      draw_trajectory: this.draw_trajectory,
      color_cue: this.color_cue,
      cue_colors: this.cue_colors,
      wall_cue: this.wall_cue,
      cue_present: this.cue_present,
      wall_color: this.wall_color,
      good_cue: this.good_cue
    });
    this.stim = new HoleStimulus(stim_config);
    this.stim.init(this.canvas);
    this.stim.loadLayout(this.layout, 'stimulus');
    this.stim.drawOnce();
    player = null;
    if (this.color_cue) {
      cue_says_hit = this.stim.metadata.goes_in === this.good_cue;
      if (this.players) {
        if (this.cue_present) {
          player = cue_says_hit ? this.players.hit : this.players.miss;
        } else {
          player = this.players.neutral;
        }
      }
    }
    if (player) {
      this.score_counter.html("Player: " + player);
    } else {
      this.score_counter.html("&nbsp");
    }
    this.message.html('Press space to start the trial');
    return this.keyboard_listener = jsPsych.pluginAPI.getKeyboardResponse({
      valid_responses: ['space'],
      rt_method: 'date',
      persist: false,
      allow_held_key: false,
      callback_function: (function(_this) {
        return function(info) {
          return _this.start();
        };
      })(this)
    });
  };

  BallTrial.prototype.start = function() {
    this.stim.startDrawing();
    return this.stim.animate(this.query_response);
  };

  BallTrial.prototype.query_response = function() {
    var start;
    start = Date.now();
    this.stim.stopDrawing();
    this.message.html(this.prompt);
    return this.keyboard_listener = jsPsych.pluginAPI.getKeyboardResponse({
      valid_responses: Object.keys(this.responses),
      rt_method: 'date',
      persist: false,
      allow_held_key: false,
      callback_function: (function(_this) {
        return function(info) {
          return _this.after_response(info);
        };
      })(this)
    });
  };

  BallTrial.prototype.after_response = function(info) {
    var correct, finish_feedback, response;
    TRIALS_COMPLETED += 1;
    response = this.responses[String.fromCharCode(info.key).toLowerCase()];
    debug_log('after', this);
    correct = this.stim.metadata.goes_in && response === 'yes' || !this.stim.metadata.goes_in && response === 'no';
    if (correct) {
      this.block.score += 1;
      console.log("CORRECT " + this.block.score + "}");
      SCORE += 1;
    }
    _.extend(this.data, {
      response: response,
      rt: info.rt,
      num_bounces: this.stim.metadata.num_bounces,
      correct: correct,
      score: this.block.score,
      goes_in: this.stim.metadata.goes_in,
      trial: this.block.trials_completed += 1,
      trials_completed: TRIALS_COMPLETED
    });
    this.update_counters();
    if (DEBUG) {
      console.log(this.data.correct ? '✓' : '✘');
    }
    if (this.show_feedback) {
      if (this.data.correct) {
        this.message.css('color', '#00c').text('Correct!');
      } else {
        this.message.css('color', 'red').text('Incorrect.');
      }
      this.stim.loadLayout(this.layout, 'feedback');
    }
    finish_feedback = (function(_this) {
      return function() {
        return _this.end_trial();
      };
    })(this);
    if (this.show_feedback) {
      this.stim.startDrawing();
      this.stim.animate(finish_feedback);
    } else {
      finish_feedback();
    }
  };

  BallTrial.prototype.end_trial = function() {
    debug_log('end', this);
    this.stim.clearLayout();
    this.message.html('&nbsp');
    jsPsych.finishTrial(this.data);
  };

  BallTrial.prototype.update_counters = function() {
    return this.progress_counter.html("Progress: " + this.block.trials_completed + "/" + this.num_trials);
  };

  return BallTrial;

})();

jsPsych.plugins['ball'] = (function() {
  var plugin;
  plugin = {};
  plugin.trial = function(display_element, trial_config) {
    var e, trial;
    display_element.empty();
    try {
      trial_config = jsPsych.pluginAPI.evaluateFunctionParameters(trial_config);
      trial = new BallTrial(trial_config, display_element);
      window.trial = trial;
      return trial.init();
    } catch (error) {
      e = error;
      return handle_error(e, trial_config, display_element);
    }
  };
  return plugin;
})();
